/**
 * fms
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AddBatteryDto } from '../model/addBatteryDto';
import { ApproveRejectDto } from '../model/approveRejectDto';
import { BatteryDetailsDto } from '../model/batteryDetailsDto';
import { BatteryInvoiceDetailsDto } from '../model/batteryInvoiceDetailsDto';
import { BatteryReportDto } from '../model/batteryReportDto';
import { CreateBatteryRequestDto } from '../model/createBatteryRequestDto';
import { ResponseObject } from '../model/responseObject';
import { UpdateBatteryRequestDto } from '../model/updateBatteryRequestDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class BatteryRequestService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param roleId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batteryRequestApproveRequestPut(body?: ApproveRejectDto, roleId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public batteryRequestApproveRequestPut(body?: ApproveRejectDto, roleId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public batteryRequestApproveRequestPut(body?: ApproveRejectDto, roleId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public batteryRequestApproveRequestPut(body?: ApproveRejectDto, roleId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (roleId !== undefined && roleId !== null) {
            queryParameters = queryParameters.set('roleId', <any>roleId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/BatteryRequest/ApproveRequest`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param registrationNumber 
     * @param inputSerialNumber 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batteryRequestCheckBatterySerialNumberGet(registrationNumber?: string, inputSerialNumber?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public batteryRequestCheckBatterySerialNumberGet(registrationNumber?: string, inputSerialNumber?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public batteryRequestCheckBatterySerialNumberGet(registrationNumber?: string, inputSerialNumber?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public batteryRequestCheckBatterySerialNumberGet(registrationNumber?: string, inputSerialNumber?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (registrationNumber !== undefined && registrationNumber !== null) {
            queryParameters = queryParameters.set('registrationNumber', <any>registrationNumber);
        }
        if (inputSerialNumber !== undefined && inputSerialNumber !== null) {
            queryParameters = queryParameters.set('inputSerialNumber', <any>inputSerialNumber);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/BatteryRequest/CheckBatterySerialNumber`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param roleId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batteryRequestCloseBatteryRequestPut(body?: ApproveRejectDto, roleId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public batteryRequestCloseBatteryRequestPut(body?: ApproveRejectDto, roleId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public batteryRequestCloseBatteryRequestPut(body?: ApproveRejectDto, roleId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public batteryRequestCloseBatteryRequestPut(body?: ApproveRejectDto, roleId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (roleId !== undefined && roleId !== null) {
            queryParameters = queryParameters.set('roleId', <any>roleId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/BatteryRequest/CloseBatteryRequest`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batteryRequestCreateBatteryPost(body?: AddBatteryDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public batteryRequestCreateBatteryPost(body?: AddBatteryDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public batteryRequestCreateBatteryPost(body?: AddBatteryDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public batteryRequestCreateBatteryPost(body?: AddBatteryDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/BatteryRequest/CreateBattery`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batteryRequestCreateBatteryRequestPost(body?: CreateBatteryRequestDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public batteryRequestCreateBatteryRequestPost(body?: CreateBatteryRequestDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public batteryRequestCreateBatteryRequestPost(body?: CreateBatteryRequestDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public batteryRequestCreateBatteryRequestPost(body?: CreateBatteryRequestDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/BatteryRequest/CreateBatteryRequest`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batteryRequestGetAllBatteryRequestsPost(body?: number, observe?: 'body', reportProgress?: boolean): Observable<ResponseObject>;
    public batteryRequestGetAllBatteryRequestsPost(body?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseObject>>;
    public batteryRequestGetAllBatteryRequestsPost(body?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseObject>>;
    public batteryRequestGetAllBatteryRequestsPost(body?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ResponseObject>('post',`${this.basePath}/BatteryRequest/GetAllBatteryRequests`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batteryRequestGetAllBatterySerialNumbersGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public batteryRequestGetAllBatterySerialNumbersGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public batteryRequestGetAllBatterySerialNumbersGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public batteryRequestGetAllBatterySerialNumbersGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/BatteryRequest/GetAllBatterySerialNumbers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batteryRequestGetBatteryDetailsByIdGet(id?: number, observe?: 'body', reportProgress?: boolean): Observable<BatteryDetailsDto>;
    public batteryRequestGetBatteryDetailsByIdGet(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BatteryDetailsDto>>;
    public batteryRequestGetBatteryDetailsByIdGet(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BatteryDetailsDto>>;
    public batteryRequestGetBatteryDetailsByIdGet(id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<BatteryDetailsDto>('get',`${this.basePath}/BatteryRequest/GetBatteryDetailsById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param serialNumber 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batteryRequestGetBatteryDetailsGet(serialNumber?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public batteryRequestGetBatteryDetailsGet(serialNumber?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public batteryRequestGetBatteryDetailsGet(serialNumber?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public batteryRequestGetBatteryDetailsGet(serialNumber?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (serialNumber !== undefined && serialNumber !== null) {
            queryParameters = queryParameters.set('serialNumber', <any>serialNumber);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/BatteryRequest/GetBatteryDetails`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param registrationNumber 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batteryRequestGetBatteryDetailsViaRegistrationNumberGet(registrationNumber?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public batteryRequestGetBatteryDetailsViaRegistrationNumberGet(registrationNumber?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public batteryRequestGetBatteryDetailsViaRegistrationNumberGet(registrationNumber?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public batteryRequestGetBatteryDetailsViaRegistrationNumberGet(registrationNumber?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (registrationNumber !== undefined && registrationNumber !== null) {
            queryParameters = queryParameters.set('registrationNumber', <any>registrationNumber);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/BatteryRequest/GetBatteryDetailsViaRegistrationNumber`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batteryRequestGetBatteryMakesGet(observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public batteryRequestGetBatteryMakesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public batteryRequestGetBatteryMakesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public batteryRequestGetBatteryMakesGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<string>>('get',`${this.basePath}/BatteryRequest/GetBatteryMakes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batteryRequestGetBatteryModelsGet(observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public batteryRequestGetBatteryModelsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public batteryRequestGetBatteryModelsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public batteryRequestGetBatteryModelsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<string>>('get',`${this.basePath}/BatteryRequest/GetBatteryModels`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param fromDate 
     * @param toDate 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batteryRequestGetBatteryRequestsReportPost(body?: number, fromDate?: string, toDate?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<BatteryReportDto>>;
    public batteryRequestGetBatteryRequestsReportPost(body?: number, fromDate?: string, toDate?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<BatteryReportDto>>>;
    public batteryRequestGetBatteryRequestsReportPost(body?: number, fromDate?: string, toDate?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<BatteryReportDto>>>;
    public batteryRequestGetBatteryRequestsReportPost(body?: number, fromDate?: string, toDate?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (fromDate !== undefined && fromDate !== null) {
            queryParameters = queryParameters.set('fromDate', <any>fromDate);
        }
        if (toDate !== undefined && toDate !== null) {
            queryParameters = queryParameters.set('toDate', <any>toDate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<BatteryReportDto>>('post',`${this.basePath}/BatteryRequest/GetBatteryRequestsReport`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batteryRequestGetBatteryTypesGet(observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public batteryRequestGetBatteryTypesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public batteryRequestGetBatteryTypesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public batteryRequestGetBatteryTypesGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<string>>('get',`${this.basePath}/BatteryRequest/GetBatteryTypes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param roleId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batteryRequestRejectRequestPut(body?: ApproveRejectDto, roleId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public batteryRequestRejectRequestPut(body?: ApproveRejectDto, roleId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public batteryRequestRejectRequestPut(body?: ApproveRejectDto, roleId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public batteryRequestRejectRequestPut(body?: ApproveRejectDto, roleId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (roleId !== undefined && roleId !== null) {
            queryParameters = queryParameters.set('roleId', <any>roleId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/BatteryRequest/RejectRequest`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param roleId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batteryRequestReopenBatteryRequestPut(body?: ApproveRejectDto, roleId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public batteryRequestReopenBatteryRequestPut(body?: ApproveRejectDto, roleId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public batteryRequestReopenBatteryRequestPut(body?: ApproveRejectDto, roleId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public batteryRequestReopenBatteryRequestPut(body?: ApproveRejectDto, roleId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (roleId !== undefined && roleId !== null) {
            queryParameters = queryParameters.set('roleId', <any>roleId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/BatteryRequest/ReopenBatteryRequest`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batteryRequestUpdateBatteryInvoiceDetailsPut(body?: BatteryInvoiceDetailsDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public batteryRequestUpdateBatteryInvoiceDetailsPut(body?: BatteryInvoiceDetailsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public batteryRequestUpdateBatteryInvoiceDetailsPut(body?: BatteryInvoiceDetailsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public batteryRequestUpdateBatteryInvoiceDetailsPut(body?: BatteryInvoiceDetailsDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/BatteryRequest/UpdateBatteryInvoiceDetails`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batteryRequestUpdateBatteryRequestPut(body?: UpdateBatteryRequestDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public batteryRequestUpdateBatteryRequestPut(body?: UpdateBatteryRequestDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public batteryRequestUpdateBatteryRequestPut(body?: UpdateBatteryRequestDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public batteryRequestUpdateBatteryRequestPut(body?: UpdateBatteryRequestDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/BatteryRequest/UpdateBatteryRequest`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
